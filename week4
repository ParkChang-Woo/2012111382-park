#include <GLFW/glfw3.h>
#include <cstring>
#include <stdlib.h>		  // srand, rand
#include <thread>         // std::this_thread::sleep_for
#include <chrono>         // std::chrono::seconds
#include "math.h"

int x_c[5] = { 80,200,320,440,560 };
int y_c[2] = { 160, 320 };

const int width = 640;
const int height = 480;

float* pixels = new float[width*height * 3];


bool insidecircle(int x, int y, int x_c, int y_c)
{
	int r = 50;

	int f = (x_c - x)*(x_c - x) + (y_c - y)*(y_c - y) - r*r;
	if (f <150 && f>-150) return true;
	else return false;
}

bool c2(int x, int y, int x_c, int y_c)
{
	int r = 15;

	int f = (x_c - x)*(x_c - x) + (y_c - y)*(y_c - y) - r*r;
	if (f <100 && f>-100) return true;
	else return false;
}

bool cursor_recog(double x, double y, int x_c, int y_c)
{
	int r = 50;

	int f = (x_c - (int)x)*(x_c - (int)x) + (y_c - (int)y)*(y_c - (int)y) - r*r;
	if (f <100) return true;
	else return false;
}



void drawPixel(const int& i, const int& j, const float& red, const float& green, const float& blue)
{
	pixels[(i + width* j) * 3 + 0] = red;
	pixels[(i + width* j) * 3 + 1] = green;
	pixels[(i + width* j) * 3 + 2] = blue;
}

void drawLine(const int& i0, const int& j0, const int& i1, const int& j1, const float& red, const float& green, const float& blue)
{
	for (int i = i0; i <= i1; i++)
	{
		const int j = (j1 - j0)*(i - i0) / (i1 - i0) + j0;

		drawPixel(i, j, red, green, blue);
	}
}


void draw_image()
{
	//c1
	for (int i = -25; i < 25; i++)
	{
		drawPixel(x_c[0]+i, y_c[1]+i, 1.0f, 0.0f, 0.0f);
		if(i>-25)drawPixel(x_c[0] - 1 + i, y_c[1] + i, 1.0f, 0.0f, 0.0f);
		if(i<24)drawPixel(x_c[0] + 1 + i, y_c[1] + i, 1.0f, 0.0f, 0.0f);
		if (i>-24)drawPixel(x_c[0] - 2 + i, y_c[1] + i, 1.0f, 0.0f, 0.0f);
		if (i<23)drawPixel(x_c[0] + 2 + i, y_c[1] + i, 1.0f, 0.0f, 0.0f);
	}

	//c2
	for (int i = x_c[1] - 50; i < x_c[1] + 50; i++)
	{
		for (int j = y_c[1] - 50; j < y_c[1] + 50; j++)
		{
			if(c2(i,j,x_c[1],y_c[1])==true) drawPixel(i, j, 1.0f, 0.0f, 0.0f);
		}
	}



	//c3
	for (int i = x_c[2] - 25; i < x_c[2] + 25; i++)
	{
		for (int j = y_c[1] - 25; j < y_c[1] + 25; j++)
		{
			if (i == x_c[2] - 25) drawPixel(i, j, 1.0f, 0.0f, 0.0f);
			if (i == x_c[2] + 24) drawPixel(i, j, 1.0f, 0.0f, 0.0f);
			if (j == y_c[1] - 25) drawPixel(i, j, 1.0f, 0.0f, 0.0f);
			if (j == y_c[1] + 24) drawPixel(i, j, 1.0f, 0.0f, 0.0f);
		}
	}

	//c4
	for (int i = -25; i < 25; i++)
	{
		drawPixel(x_c[3] + i, y_c[1] + i, 1.0f, 0.0f, 0.0f);
		drawPixel(x_c[3] - i, y_c[1] + i, 1.0f, 0.0f, 0.0f);
	}

	//c5
	for (int j = y_c[1] - 30; j < y_c[1] + 30; j++)
	{
		drawPixel(x_c[4], j, 1.0f, 0.0f, 0.0f);
	}
	for (int i = 0; i < 20; i++)
	{
		drawPixel(x_c[4]+i, y_c[1]-30+i, 1.0f, 0.0f, 0.0f);
		drawPixel(x_c[4] -i, y_c[1] - 30+i, 1.0f, 0.0f, 0.0f);
	}

	//c6
	for (int i = x_c[0] - 30; i < x_c[0] + 30; i++)
	{
		drawPixel(i, y_c[0], 1.0f, 0.0f, 0.0f);
	}
	for (int i = 0; i < 20; i++)
	{
		drawPixel(x_c[0]+30 - i, y_c[0] + i, 1.0f, 0.0f, 0.0f);
		drawPixel(x_c[0] + 30 - i, y_c[0] - i, 1.0f, 0.0f, 0.0f);
	}


	//c7
	for (int i = x_c[1] - 14; i < x_c[1] + 14; i++)
	{
		drawPixel(i, y_c[0], 1.0f, 0.0f, 0.0f);
		drawPixel(i, y_c[0]+1, 1.0f, 0.0f, 0.0f);
		drawPixel(i, y_c[0]-1, 1.0f, 0.0f, 0.0f);
	}

		for (int i = 0; i < 30; i++)
		{
			drawPixel(x_c[1] + i, y_c[0] + 30 -(2*i), 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[1] + i, y_c[0] -1 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[1] + i, y_c[0] -2 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[1] - i, y_c[0] + 30 - (2 * i), 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[1] - i, y_c[0] -1 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[1] - i, y_c[0] -2 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);
		}



	//c8
		for (int j = y_c[0] - 30; j < y_c[0] + 30; j++)
		{
			drawPixel(x_c[2], j, 1.0f, 0.0f, 0.0f);
		}


	//c9
		for (int i = x_c[3] - 30; i < x_c[3] + 30; i++)
		{
			drawPixel(i, y_c[0], 1.0f, 0.0f, 0.0f);
		}
		for (int i = 0; i < 20; i++)
		{
			drawPixel(x_c[3] - 30 + i, y_c[0] + i, 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[3] - 30 + i, y_c[0] - i, 1.0f, 0.0f, 0.0f);
		}


	//c10
		for (int j = y_c[0] - 30; j < y_c[0] + 30; j++)
		{
			drawPixel(x_c[4], j, 1.0f, 0.0f, 0.0f);
		}
		for (int i = 0; i < 20; i++)
		{
			drawPixel(x_c[4] + i, y_c[0] + 30 - i, 1.0f, 0.0f, 0.0f);
			drawPixel(x_c[4] - i, y_c[0] + 30 - i, 1.0f, 0.0f, 0.0f);
		}

}




int main(void)
{
	GLFWwindow* window;

	double xpos, ypos;


	/* Initialize the library */
	if (!glfwInit())
		return -1;

	/* Create a windowed mode window and its OpenGL context */
	window = glfwCreateWindow(width, height, "window", NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(window);



	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{





		/* Render here */
		glClear(GL_COLOR_BUFFER_BIT);


		/////여기부터시작

		std::fill_n(pixels, width*height * 3, 1.0f);

		glfwGetCursorPos(window, &xpos, &ypos);

		//printf("%d,%d", (int)xpos, 480-(int)ypos);

		draw_image();


		//circle
		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 2; j++)
			{
				if (cursor_recog(xpos, 480 - ypos, x_c[i], y_c[j]) == true)
				{
					for (int x = x_c[i] - 100; x < x_c[i] + 100; x++)
					{
						for (int y = y_c[j] - 100; y < y_c[j] + 100; y++)
						{
							if (insidecircle(x, y, x_c[i], y_c[j]) == true)
							{
								drawPixel(x, y, 0.0f, 0.0f, 1.0f);
							}
						}
					}
				}
				else
				{
					for (int x = x_c[i] - 100; x < x_c[i] + 100; x++)
					{
						for (int y = y_c[j] - 100; y < y_c[j] + 100; y++)
						{
							if (insidecircle(x, y, x_c[i], y_c[j]) == true)
							{
								drawPixel(x, y, 1.0f, 0.0f, 0.0f);
							}
						}
					}
				}
			}
		}







		glDrawPixels(width, height, GL_RGB, GL_FLOAT, pixels);

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();
	}

	delete[] pixels;

	glfwTerminate();
	return 0;
}

