#include <GLFW/glfw3.h>
#include <cstring>
#include <stdlib.h>    // srand, rand#include <thread>         // std::this_thread::sleep_for#include <chrono>         // std::chrono::seconds#include "math.h"int x_c[5] = { 80,200,320,440,560 };int y_c[4] = {550, 400, 250, 100 };const int width = 640;const int height = 640;float* pixels = new float[width*height * 3];bool c2_check(int x, int y, int x_c, int y_c){ int r = 15; int f = (x_c - x)*(x_c - x) + (y_c - y)*(y_c - y) - r*r; if (f <100 && f>-100) return true; else return false;}bool insidecircle(int x, int y, int x_c, int y_c){ int r = 50; int f = (x_c - x)*(x_c - x) + (y_c - y)*(y_c - y) - r*r; if (f <150 && f>-150) return true; else return false;}bool cursor_recog(double x, double y, int x_c, int y_c){ int r = 50; int f = (x_c - (int)x)*(x_c - (int)x) + (y_c - (int)y)*(y_c - (int)y) - r*r; if (f <100) return true; else return false;}void drawPixel(const int& i, const int& j, const float& red, const float& green, const float& blue){ pixels[(i + width* j) * 3 + 0] = red; pixels[(i + width* j) * 3 + 1] = green; pixels[(i + width* j) * 3 + 2] = blue;}class button{public: int x, y; //constructor button() {} button(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } virtual void draw() { } void DrawButton_Red() {  for (int x_i = x - 60; x_i < x + 60; x_i++)  {   for (int y_i = y - 60; y_i < y + 60; y_i++)   {    if (insidecircle(x_i, y_i, x, y) == true)    {     drawPixel(x_i, y_i, 1.0f, 0.0f, 0.0f);    }   }  } }  void DrawButton_Blue()  {   for (int x_i = x - 60; x_i < x + 60; x_i++)   {    for (int y_i = y - 60; y_i < y + 60; y_i++)    {     if (insidecircle(x_i, y_i, x, y) == true)     {      drawPixel(x_i, y_i, 0.0f, 0.0f, 1.0f);     }    }   }  }};class c1 : public button{public: int x, y; //constructor c1(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = -25; i < 25; i++)  {   drawPixel(x + i, y + i, 1.0f, 0.0f, 0.0f);   if (i>-25)drawPixel(x - 1 + i, y + i, 1.0f, 0.0f, 0.0f);   if (i<24)drawPixel(x + 1 + i, y + i, 1.0f, 0.0f, 0.0f);   if (i>-24)drawPixel(x - 2 + i, y + i, 1.0f, 0.0f, 0.0f);   if (i<23)drawPixel(x + 2 + i, y + i, 1.0f, 0.0f, 0.0f);  } }};class c2 : public button{public: int x, y; //constructor c2(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = x - 50; i < x + 50; i++)  {   for (int j = x - 50; j < y + 50; j++)   {    if (c2_check(i, j, x, y) == true) drawPixel(i, j, 1.0f, 0.0f, 0.0f);   }  } }};class c3: public button{public: int x, y; //constructor c3(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = x - 25; i < x + 25; i++)  {   for (int j = y - 25; j < y + 25; j++)   {    if (i == x - 25) drawPixel(i, j, 1.0f, 0.0f, 0.0f);    if (i == x + 24) drawPixel(i, j, 1.0f, 0.0f, 0.0f);    if (j == y - 25) drawPixel(i, j, 1.0f, 0.0f, 0.0f);    if (j == y + 24) drawPixel(i, j, 1.0f, 0.0f, 0.0f);   }  } }};class c4 : public button{public: int x, y; //constructor c4(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = -25; i < 25; i++)  {   drawPixel(x + i, y + i, 1.0f, 0.0f, 0.0f);   drawPixel(x - i, y + i, 1.0f, 0.0f, 0.0f);  } }};class c5 : public button{public: int x, y; //constructor c5(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int j = y - 30; j < y + 30; j++)  {   drawPixel(x, j, 1.0f, 0.0f, 0.0f);  }  for (int i = 0; i < 20; i++)  {   drawPixel(x + i, y - 30 + i, 1.0f, 0.0f, 0.0f);   drawPixel(x - i, y - 30 + i, 1.0f, 0.0f, 0.0f);  } }};class c6 : public button{public: int x, y; //constructor c6(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = x - 30; i < x + 30; i++)  {   drawPixel(i, y, 1.0f, 0.0f, 0.0f);  }  for (int i = 0; i < 20; i++)  {   drawPixel(x + 30 - i, y + i, 1.0f, 0.0f, 0.0f);   drawPixel(x + 30 - i, y - i, 1.0f, 0.0f, 0.0f);  } }};class c7 : public button{public: int x, y; //constructor c7(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = x - 14; i < x + 14; i++)  {   drawPixel(i, y, 1.0f, 0.0f, 0.0f);   drawPixel(i, y + 1, 1.0f, 0.0f, 0.0f);   drawPixel(i, y - 1, 1.0f, 0.0f, 0.0f);  }  for (int i = 0; i < 30; i++)  {   drawPixel(x + i, y + 30 - (2 * i), 1.0f, 0.0f, 0.0f);   drawPixel(x + i, y - 1 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);   drawPixel(x + i, y - 2 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);   drawPixel(x - i, y + 30 - (2 * i), 1.0f, 0.0f, 0.0f);   drawPixel(x - i, y - 1 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);   drawPixel(x - i, y - 2 + 30 - (2 * i), 1.0f, 0.0f, 0.0f);  } }};class c8 : public button{public: int x, y; //constructor c8(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int j = y - 30; j < y + 30; j++)  {   drawPixel(x, j, 1.0f, 0.0f, 0.0f);  } }};class c9 : public button{public: int x, y; //constructor c9(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int i = x - 30; i < x + 30; i++)  {   drawPixel(i, y, 1.0f, 0.0f, 0.0f);  }  for (int i = 0; i < 20; i++)  {   drawPixel(x - 30 + i, y + i, 1.0f, 0.0f, 0.0f);   drawPixel(x - 30 + i, y - i, 1.0f, 0.0f, 0.0f);  } }};class c10 : public button{public: int x, y; //constructor c10(const int& _x, const int& _y) {  setting(_x, _y); } void setting(const int& _x, const int& _y) {  x = _x;  y = _y; } void draw() {  for (int j = y - 30; j < y+ 30; j++)  {   drawPixel(x, j, 1.0f, 0.0f, 0.0f);  }  for (int i = 0; i < 20; i++)  {   drawPixel(x + i, y + 30 - i, 1.0f, 0.0f, 0.0f);   drawPixel(x - i, y + 30 - i, 1.0f, 0.0f, 0.0f);  } }};int main(void){ //initialization(circle) button **draw_circle; draw_circle = new button*[4]; for (int i = 0; i < 4; i++) {  draw_circle[i] = new button[5]; } //initialization(icon) button ***draw_ob; draw_ob = new button**[4]; for (int i = 0; i < 4; i++) {  draw_ob[i] = new button*[5]; } for (int i = 0; i < 2; i++) {  draw_ob[i][0] = new c1(x_c[0], y_c[i]); } for (int i = 0; i < 2; i++) {  draw_ob[i][1] = new c2(x_c[1], y_c[i]); } for (int i = 0; i < 2; i++) {  draw_ob[i][2] = new c3(x_c[2], y_c[i]); } for (int i = 0; i < 2; i++) {  draw_ob[i][3] = new c4(x_c[3], y_c[i]); } for (int i = 0; i < 2; i++) {  draw_ob[i][4] = new c5(x_c[4], y_c[i]); } for (int i = 2; i < 4; i++) {  draw_ob[i][0] = new c6(x_c[0], y_c[i]); } for (int i = 2; i < 4; i++) {  draw_ob[i][1] = new c7(x_c[1], y_c[i]); } for (int i = 2; i < 4; i++) {  draw_ob[i][2] = new c8(x_c[2], y_c[i]); } for (int i = 2; i < 4; i++) {  draw_ob[i][3] = new c9(x_c[3], y_c[i]); } for (int i = 2; i < 4; i++) {  draw_ob[i][4] = new c10(x_c[4], y_c[i]); } GLFWwindow* window; double xpos, ypos; /* Initialize the library */ if (!glfwInit())  return -1; /* Create a windowed mode window and its OpenGL context */ window = glfwCreateWindow(width, height, "window", NULL, NULL); if (!window) {  glfwTerminate();  return -1; } /* Make the window's context current */ glfwMakeContextCurrent(window); /* Loop until the user closes the window */ while (!glfwWindowShouldClose(window)) {  /* Render here */  glClear(GL_COLOR_BUFFER_BIT);  /////여기부터시작  std::fill_n(pixels, width*height * 3, 1.0f);  glfwGetCursorPos(window, &xpos, &ypos);  for (int j = 0; j < 5; j++)   for (int i = 0; i < 4; i++)  {   draw_circle[i][j].setting(x_c[j], y_c[i]);   if (cursor_recog(xpos, 640 - ypos, x_c[j], y_c[i]) == false)   {    draw_circle[i][j].DrawButton_Red();   }   else   {    draw_circle[i][j].DrawButton_Blue();   }  }  for (int j = 0; j < 4; j++)  for (int i = 0; i < 5; i++)  {   draw_ob[j][i]->draw();  }  /*for (int i = 0; i < 2; i++)  {   second[i] = new c2(x_c[1], y_c[i]);   second[i]->draw();  }*/  glDrawPixels(width, height, GL_RGB, GL_FLOAT, pixels);  /* Swap front and back buffers */  glfwSwapBuffers(window);  /* Poll for and process events */  glfwPollEvents(); } delete[] pixels; delete[] draw_circle; delete[] draw_ob; glfwTerminate(); return 0;}
